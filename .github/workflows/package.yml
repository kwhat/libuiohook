name: Nightly Build
on:
  push:
    branches:
      - 1.2

jobs:
  apple:
    runs-on: macos-latest
#    env:
#      DEVELOPER_DIR: /Applications/Xcode_9.4.1.app/Contents/Developer

    strategy:
      fail-fast: true
      matrix:
        target: [x86_64-apple-darwin9]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Compile x86_64
        shell: bash
        run: |
          cmake -S ${{github.workspace}} -B ${{github.workspace}}/build/${{matrix.target}} \
            -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/toolchain/${{matrix.target}}.cmake \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist/${{matrix.target}} \
            -DCMAKE_VERBOSE_MAKEFILE=true -DENABLE_DEMO=ON -DENABLE_STATIC=ON -DENABLE_SHARED=ON

          cmake --build ${{github.workspace}}/build/${{matrix.target}} \
            --parallel 2 \
            --target install

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/dist/**/*


  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        target: [armv7a-hardfloat-linux-gnueabihf, i386-linux-gnu, x86_64-linux-gnu]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Setup arm
        if: startsWith(matrix.target, 'arm')
        shell: bash
        run: |
          sudo bash -c 'source /etc/lsb-release && echo "
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe
          
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME} main universe
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-updates main universe
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-backports main universe
          " > /etc/apt/sources.list'

          sudo rm -Rf /etc/apt/sources.list.d

          sudo dpkg --add-architecture armhf
          sudo apt-get update -m

          sudo apt-get install \
            binutils-arm-linux-gnueabihf \
            gcc-arm-linux-gnueabihf

          sudo apt-get install \
            libx11-dev:armhf \
            libxtst-dev:armhf \
            libxt-dev:armhf \
            libxinerama-dev:armhf \
            libx11-xcb-dev:armhf \
            libxkbcommon-dev:armhf \
            libxkbcommon-x11-dev:armhf \
            libxkbfile-dev:armhf


      - name: Setup x86
        if: startsWith(matrix.target, 'i386')
        shell: bash
        run: |
          sudo bash -c 'source /etc/lsb-release && echo "
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe
          " > /etc/apt/sources.list'

          sudo rm -Rf /etc/apt/sources.list.d

          sudo dpkg --add-architecture i386
          sudo apt-get update -m

          sudo apt-get install \
            binutils-i686-linux-gnu \
            gcc-i686-linux-gnu

          sudo apt-get install \
            libx11-dev:i386 \
            libxtst-dev:i386 \
            libxt-dev:i386 \
            libxinerama-dev:i386 \
            libx11-xcb-dev:i386 \
            libxkbcommon-dev:i386 \
            libxkbcommon-x11-dev:i386 \
            libxkbfile-dev:i386


      - name: Setup x86-64
        if: startsWith(matrix.target, 'x86_64')
        shell: bash
        run: |
          sudo bash -c 'source /etc/lsb-release && echo "
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe
          " > /etc/apt/sources.list'

          sudo rm -Rf /etc/apt/sources.list.d

          sudo apt-get update -m

          sudo apt-get install \
            libx11-dev:amd64 \
            libxtst-dev:amd64 \
            libxt-dev:amd64 \
            libxinerama-dev:amd64 \
            libx11-xcb-dev:amd64 \
            libxkbcommon-dev:amd64 \
            libxkbcommon-x11-dev:amd64 \
            libxkbfile-dev:amd64


      - name: Compile
        shell: bash
        run: |
          cmake -S ${{github.workspace}} -B ${{github.workspace}}/build/${{matrix.target}} \
            -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/toolchain/${{matrix.target}}.cmake \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist/${{matrix.target}} \
            -DCMAKE_VERBOSE_MAKEFILE=true -DENABLE_DEMO=ON -DENABLE_STATIC=ON -DENABLE_SHARED=ON

          cmake --build ${{github.workspace}}/build/${{matrix.target}} \
            --parallel 2 \
            --target install

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/dist/**/*


  windows:
    runs-on: windows-latest

    strategy:
      fail-fast: true
      matrix:
        target: [arm7ve-win32-msvc, i386-win32-msvc, x86_64-win32-msvc]

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Setup arm
        if: startsWith(matrix.target, 'arm')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm

      - name: Setup x86
        if: startsWith(matrix.target, 'i386')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_x86

      - name: Setup x86-64
        if: startsWith(matrix.target, 'x86_64')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Compile
        run: |
          cmake -S ${{github.workspace}} -B ${{github.workspace}}\build\${{matrix.target}} `
          -G "Ninja" `
          -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}\cmake\toolchain\${{matrix.target}}.cmake `
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\dist\${{matrix.target}} `
          -DCMAKE_VERBOSE_MAKEFILE=true -DENABLE_DEMO=ON -DENABLE_STATIC=ON -DENABLE_SHARED=ON

          cmake --build ${{github.workspace}}\build\${{matrix.target}} `
          --parallel 2 `
          --target install

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/dist/**/*
